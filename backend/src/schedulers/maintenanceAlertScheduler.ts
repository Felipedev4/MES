/**
 * Scheduler para verifica√ß√£o autom√°tica de alertas de manuten√ß√£o
 */

import * as cron from 'node-cron';
import { checkAndSendMaintenanceAlerts } from '../services/maintenanceAlertService';

let schedulerTask: cron.ScheduledTask | null = null;

/**
 * Inicia o scheduler de alertas de manuten√ß√£o
 * Executa todos os dias √†s 08:00
 */
export function startMaintenanceAlertScheduler(): void {
  // Se j√° est√° rodando, n√£o iniciar novamente
  if (schedulerTask) {
    console.log('‚è∞ Scheduler de alertas de manuten√ß√£o j√° est√° ativo');
    return;
  }

  // Agendar verifica√ß√£o di√°ria √†s 08:00
  schedulerTask = cron.schedule('0 8 * * *', async () => {
    console.log('‚è∞ Executando verifica√ß√£o agendada de alertas de manuten√ß√£o...');
    try {
      const result = await checkAndSendMaintenanceAlerts();
      console.log(`‚úÖ Verifica√ß√£o agendada conclu√≠da: ${result.sent} e-mails enviados`);
      
      if (result.errors.length > 0) {
        console.warn('‚ö†Ô∏è  Erros durante verifica√ß√£o:', result.errors);
      }
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o agendada:', error);
    }
  });

  console.log('‚è∞ Scheduler de alertas de manuten√ß√£o iniciado (diariamente √†s 08:00)');
  
  // Executar verifica√ß√£o inicial ap√≥s 1 minuto
  setTimeout(async () => {
    console.log('üîç Executando verifica√ß√£o inicial de alertas...');
    try {
      const result = await checkAndSendMaintenanceAlerts();
      console.log(`‚úÖ Verifica√ß√£o inicial conclu√≠da: ${result.sent} e-mails enviados`);
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o inicial:', error);
    }
  }, 60000); // 1 minuto
}

/**
 * Para o scheduler
 */
export function stopMaintenanceAlertScheduler(): void {
  if (schedulerTask) {
    schedulerTask.stop();
    schedulerTask = null;
    console.log('‚è∞ Scheduler de alertas de manuten√ß√£o parado');
  }
}

/**
 * Verifica se o scheduler est√° ativo
 */
export function isSchedulerActive(): boolean {
  return schedulerTask !== null;
}

