-- ================================================================================================
-- üè¢ SCRIPT: Associar Todos os Dados √† Empresa EMP-001
-- ================================================================================================
-- Este script associa TODOS os registros existentes √† empresa EMP-001
-- Ap√≥s executar, ao logar com EMP-002, voc√™ N√ÉO ver√° nenhum dado
-- ================================================================================================

-- ================================================================================================
-- PASSO 1: VERIFICAR EMPRESAS EXISTENTES
-- ================================================================================================
SELECT 
    'üìä EMPRESAS CADASTRADAS' as info,
    id,
    code,
    name,
    active
FROM companies
ORDER BY id;

-- ================================================================================================
-- PASSO 2: CRIAR EMPRESA EMP-001 (SE N√ÉO EXISTIR)
-- ================================================================================================
INSERT INTO companies (code, name, active, created_at, updated_at)
VALUES ('EMP-001', 'Empresa Principal', true, NOW(), NOW())
ON CONFLICT (code) DO NOTHING;

-- Verificar ID da empresa EMP-001
SELECT 
    'üîç EMPRESA EMP-001' as info,
    id,
    code,
    name
FROM companies 
WHERE code = 'EMP-001';

-- ================================================================================================
-- PASSO 3: ASSOCIAR TODOS OS MOLDES √Ä EMPRESA EMP-001
-- ================================================================================================

-- Ver moldes antes da atualiza√ß√£o
SELECT 
    'üìã MOLDES ANTES' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM molds;

-- Atualizar todos os moldes para EMP-001
UPDATE molds 
SET 
    company_id = (SELECT id FROM companies WHERE code = 'EMP-001'),
    updated_at = NOW()
WHERE company_id IS NULL OR company_id != (SELECT id FROM companies WHERE code = 'EMP-001');

-- Ver moldes depois da atualiza√ß√£o
SELECT 
    '‚úÖ MOLDES DEPOIS' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM molds;

-- ================================================================================================
-- PASSO 4: ASSOCIAR TODOS OS ITENS √Ä EMPRESA EMP-001
-- ================================================================================================

-- Ver itens antes da atualiza√ß√£o
SELECT 
    'üìã ITENS ANTES' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM items;

-- Atualizar todos os itens para EMP-001
UPDATE items 
SET 
    company_id = (SELECT id FROM companies WHERE code = 'EMP-001'),
    updated_at = NOW()
WHERE company_id IS NULL OR company_id != (SELECT id FROM companies WHERE code = 'EMP-001');

-- Ver itens depois da atualiza√ß√£o
SELECT 
    '‚úÖ ITENS DEPOIS' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM items;

-- ================================================================================================
-- PASSO 5: ASSOCIAR TODAS AS ORDENS √Ä EMPRESA EMP-001
-- ================================================================================================

-- Ver ordens antes da atualiza√ß√£o
SELECT 
    'üìã ORDENS ANTES' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM production_orders;

-- Atualizar todas as ordens para EMP-001
UPDATE production_orders 
SET 
    company_id = (SELECT id FROM companies WHERE code = 'EMP-001'),
    updated_at = NOW()
WHERE company_id IS NULL OR company_id != (SELECT id FROM companies WHERE code = 'EMP-001');

-- Ver ordens depois da atualiza√ß√£o
SELECT 
    '‚úÖ ORDENS DEPOIS' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM production_orders;

-- ================================================================================================
-- PASSO 6: ASSOCIAR SETORES √Ä EMPRESA EMP-001
-- ================================================================================================

-- Ver setores antes
SELECT 
    'üìã SETORES ANTES' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM sectors;

-- Atualizar setores
UPDATE sectors 
SET 
    company_id = (SELECT id FROM companies WHERE code = 'EMP-001'),
    updated_at = NOW()
WHERE company_id IS NULL OR company_id != (SELECT id FROM companies WHERE code = 'EMP-001');

-- Nota: Setores sempre devem ter company_id (obrigat√≥rio no schema)
-- Se houver erro, pode ser porque j√° est√£o associados

-- Ver setores depois
SELECT 
    '‚úÖ SETORES DEPOIS' as info,
    COUNT(*) as total,
    COUNT(CASE WHEN company_id IS NULL THEN 1 END) as sem_empresa,
    COUNT(CASE WHEN company_id IS NOT NULL THEN 1 END) as com_empresa
FROM sectors;

-- ================================================================================================
-- PASSO 7: CRIAR EMPRESA EMP-002 (VAZIA)
-- ================================================================================================

INSERT INTO companies (code, name, active, created_at, updated_at)
VALUES ('EMP-002', 'Empresa Secund√°ria', true, NOW(), NOW())
ON CONFLICT (code) DO NOTHING;

SELECT 
    '‚úÖ EMPRESA EMP-002 CRIADA' as info,
    id,
    code,
    name
FROM companies 
WHERE code = 'EMP-002';

-- ================================================================================================
-- PASSO 8: VINCULAR USU√ÅRIOS √ÄS EMPRESAS
-- ================================================================================================

-- Verificar usu√°rios existentes
SELECT 
    'üë• USU√ÅRIOS' as info,
    id,
    email,
    name,
    role
FROM users
ORDER BY id;

-- Vincular usu√°rio 1 √† EMP-001 (empresa padr√£o)
INSERT INTO user_companies (user_id, company_id, is_default, created_at, updated_at)
VALUES (
    1, 
    (SELECT id FROM companies WHERE code = 'EMP-001'),
    true,
    NOW(),
    NOW()
)
ON CONFLICT (user_id, company_id) DO UPDATE
SET is_default = true, updated_at = NOW();

-- Vincular usu√°rio 1 tamb√©m √† EMP-002 (para testes)
INSERT INTO user_companies (user_id, company_id, is_default, created_at, updated_at)
VALUES (
    1, 
    (SELECT id FROM companies WHERE code = 'EMP-002'),
    false,
    NOW(),
    NOW()
)
ON CONFLICT (user_id, company_id) DO NOTHING;

-- Definir EMP-001 como empresa selecionada
UPDATE users 
SET selected_company_id = (SELECT id FROM companies WHERE code = 'EMP-001')
WHERE id = 1;

-- Ver v√≠nculos criados
SELECT 
    'üîó V√çNCULOS CRIADOS' as info,
    u.id as user_id,
    u.email,
    c.code as company_code,
    c.name as company_name,
    uc.is_default
FROM user_companies uc
JOIN users u ON uc.user_id = u.id
JOIN companies c ON uc.company_id = c.id
ORDER BY u.id, uc.is_default DESC;

-- ================================================================================================
-- PASSO 9: VERIFICA√á√ÉO FINAL
-- ================================================================================================

-- Resumo por empresa
SELECT 
    'üìä RESUMO FINAL - DADOS POR EMPRESA' as info,
    c.code as empresa_code,
    c.name as empresa_nome,
    COUNT(DISTINCT m.id) as moldes,
    COUNT(DISTINCT i.id) as itens,
    COUNT(DISTINCT po.id) as ordens,
    COUNT(DISTINCT s.id) as setores
FROM companies c
LEFT JOIN molds m ON m.company_id = c.id
LEFT JOIN items i ON i.company_id = c.id
LEFT JOIN production_orders po ON po.company_id = c.id
LEFT JOIN sectors s ON s.company_id = c.id
GROUP BY c.id, c.code, c.name
ORDER BY c.code;

-- Resultado esperado:
-- EMP-001: Todos os dados (moldes, itens, ordens, setores)
-- EMP-002: 0 dados (empresa vazia)

-- ================================================================================================
-- PASSO 10: TESTE - SIMULAR LOGIN COM CADA EMPRESA
-- ================================================================================================

-- Simulando query como se fosse usu√°rio da EMP-001
SELECT 
    'üîç TESTE: MOLDES DA EMP-001' as teste,
    COUNT(*) as total
FROM molds 
WHERE company_id = (SELECT id FROM companies WHERE code = 'EMP-001');
-- Deve retornar: todos os moldes

-- Simulando query como se fosse usu√°rio da EMP-002
SELECT 
    'üîç TESTE: MOLDES DA EMP-002' as teste,
    COUNT(*) as total
FROM molds 
WHERE company_id = (SELECT id FROM companies WHERE code = 'EMP-002');
-- Deve retornar: 0 (nenhum molde)

-- Simulando query de itens EMP-001
SELECT 
    'üîç TESTE: ITENS DA EMP-001' as teste,
    COUNT(*) as total
FROM items 
WHERE company_id = (SELECT id FROM companies WHERE code = 'EMP-001');

-- Simulando query de itens EMP-002
SELECT 
    'üîç TESTE: ITENS DA EMP-002' as teste,
    COUNT(*) as total
FROM items 
WHERE company_id = (SELECT id FROM companies WHERE code = 'EMP-002');
-- Deve retornar: 0

-- Simulando query de ordens EMP-001
SELECT 
    'üîç TESTE: ORDENS DA EMP-001' as teste,
    COUNT(*) as total
FROM production_orders 
WHERE company_id = (SELECT id FROM companies WHERE code = 'EMP-001');

-- Simulando query de ordens EMP-002
SELECT 
    'üîç TESTE: ORDENS DA EMP-002' as teste,
    COUNT(*) as total
FROM production_orders 
WHERE company_id = (SELECT id FROM companies WHERE code = 'EMP-002');
-- Deve retornar: 0

-- ================================================================================================
-- ‚úÖ SCRIPT CONCLU√çDO
-- ================================================================================================

SELECT 
    '‚úÖ SCRIPT CONCLU√çDO COM SUCESSO!' as status,
    'Todos os dados foram associados √† EMP-001' as resultado,
    'EMP-002 est√° vazia e pronta para novos dados' as proximo_passo;

-- ================================================================================================
-- üéØ PR√ìXIMOS PASSOS
-- ================================================================================================

/*
1. ‚úÖ Execute este script no PostgreSQL
2. üîÑ Fa√ßa logout no sistema
3. üîë Fa√ßa login novamente
4. üè¢ Selecione EMP-001 ‚Üí Deve ver todos os dados
5. üè¢ Selecione EMP-002 ‚Üí N√ÉO deve ver nenhum dado
6. ‚úÖ Teste criar um molde na EMP-002
7. üîÑ Troque para EMP-001 ‚Üí N√£o deve ver o molde da EMP-002
8. üéâ Sistema multi-empresa funcionando!
*/

-- ================================================================================================
-- üìù NOTAS IMPORTANTES
-- ================================================================================================

/*
APONTAMENTOS e PARADAS s√£o vinculados INDIRETAMENTE via ProductionOrder:
- Ao associar todas as ordens √† EMP-001, automaticamente todos os apontamentos
  dessas ordens tamb√©m ficam vinculados √† EMP-001
- Quando logar com EMP-002, n√£o ver√° apontamentos pois n√£o h√° ordens da EMP-002

CRIAR DADOS TESTE PARA EMP-002 (opcional):
-- Depois de executar este script, voc√™ pode criar dados teste para EMP-002:

INSERT INTO molds (code, name, cavities, company_id, active, created_at, updated_at)
VALUES (
    'M-EMP002-001',
    'Molde Teste EMP-002',
    1,
    (SELECT id FROM companies WHERE code = 'EMP-002'),
    true,
    NOW(),
    NOW()
);
*/

-- ================================================================================================
-- FIM DO SCRIPT
-- ================================================================================================

