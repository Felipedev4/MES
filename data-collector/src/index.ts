import * as dotenv from 'dotenv';
import { logger } from './utils/logger';
import { ApiClient } from './services/ApiClient';
import { PlcPoolManager } from './services/PlcPoolManager';
import { ProductionMonitor } from './services/ProductionMonitor';
import { HealthCheck } from './services/HealthCheck';

// Carregar vari√°veis de ambiente
dotenv.config();

// Validar vari√°veis obrigat√≥rias
const requiredEnvVars = ['BACKEND_API_URL', 'API_KEY'];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    logger.error(`‚ùå Vari√°vel de ambiente ${envVar} n√£o configurada`);
    process.exit(1);
  }
}

// Configura√ß√µes
const BACKEND_API_URL = process.env.BACKEND_API_URL!;
const API_KEY = process.env.API_KEY!;
const HEALTH_CHECK_PORT = parseInt(process.env.HEALTH_CHECK_PORT || '3002');

// Servi√ßos globais
let apiClient: ApiClient;
let plcPoolManager: PlcPoolManager;
let productionMonitor: ProductionMonitor;
let healthCheck: HealthCheck;

/**
 * Inicializar aplica√ß√£o
 */
async function initialize(): Promise<void> {
  try {
    logger.info('');
    logger.info('================================================');
    logger.info('  MES DATA COLLECTOR - Iniciando');
    logger.info('================================================');
    logger.info('');

    // 1. Criar API Client
    logger.info('üîó Inicializando API Client...');
    apiClient = new ApiClient(BACKEND_API_URL, API_KEY);

    // 2. Testar conex√£o com backend
    logger.info('üè• Testando conex√£o com backend...');
    const backendHealthy = await apiClient.checkBackendHealth();
    if (!backendHealthy) {
      logger.warn('‚ö†Ô∏è  Backend n√£o est√° respondendo. Continuando mesmo assim...');
    } else {
      logger.info('‚úÖ Backend est√° respondendo');
    }

    // 3. Inicializar PLC Pool Manager
    logger.info('üîå Inicializando PLC Pool Manager...');
    plcPoolManager = new PlcPoolManager(apiClient);
    await plcPoolManager.start();
    logger.info('‚úÖ PLC Pool Manager iniciado');

    // 4. Inicializar Production Monitor
    logger.info('üìä Inicializando Production Monitor...');
    productionMonitor = new ProductionMonitor(apiClient);
    await productionMonitor.start();
    logger.info('‚úÖ Production Monitor iniciado');

    // 5. Inicializar Health Check Server
    logger.info('üè• Inicializando Health Check Server...');
    healthCheck = new HealthCheck(
      HEALTH_CHECK_PORT,
      apiClient,
      plcPoolManager,
      productionMonitor
    );
    await healthCheck.start();
    logger.info(`‚úÖ Health Check Server rodando na porta ${HEALTH_CHECK_PORT}`);

    logger.info('');
    logger.info('================================================');
    logger.info('  ‚úÖ MES DATA COLLECTOR INICIADO COM SUCESSO');
    logger.info('================================================');
    logger.info('');
    logger.info(`üì° Backend API: ${BACKEND_API_URL}`);
    logger.info(`üè• Health Check: http://localhost:${HEALTH_CHECK_PORT}/health`);
    logger.info('');
    
  } catch (error: any) {
    logger.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
    process.exit(1);
  }
}

/**
 * Encerrar aplica√ß√£o gracefully
 */
async function shutdown(): Promise<void> {
  logger.info('');
  logger.info('‚è≥ Encerrando Data Collector...');
  
  try {
    // Parar servi√ßos na ordem inversa
    if (healthCheck) {
      await healthCheck.stop();
    }
    
    if (productionMonitor) {
      productionMonitor.stop();
    }
    
    if (plcPoolManager) {
      await plcPoolManager.stop();
    }

    logger.info('‚úÖ Data Collector encerrado com sucesso');
    logger.info('');
    
    process.exit(0);
  } catch (error: any) {
    logger.error('‚ùå Erro ao encerrar:', error);
    process.exit(1);
  }
}

// Event handlers para encerramento graceful
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

// Handler para erros n√£o tratados
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  shutdown();
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection:', reason);
  shutdown();
});

// Inicializar aplica√ß√£o
initialize();
